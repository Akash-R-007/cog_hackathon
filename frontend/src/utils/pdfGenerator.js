// Enhanced PDF generator with better table handling
import jsPDF from 'jspdf';
import 'jspdf-autotable';

export const generateTransactionPDF = (accountData) => {
  try {
    // Create new PDF document
    const doc = new jsPDF('p', 'mm', 'a4'); // Portrait, millimeters, A4
    
    // Set font
    doc.setFont('helvetica');
    
    // Add title
    doc.setFontSize(20);
    doc.setTextColor(40, 40, 40);
    doc.text('Bank Transaction Report', 20, 25);
    
    // Add date
    doc.setFontSize(10);
    doc.setTextColor(100, 100, 100);
    doc.text(`Generated on: ${new Date().toLocaleDateString()}`, 20, 35);
    
    // Add account information
    doc.setFontSize(14);
    doc.setTextColor(40, 40, 40);
    doc.text('Account Information', 20, 50);
    
    doc.setFontSize(10);
    doc.setTextColor(60, 60, 60);
    doc.text(`Customer Name: ${accountData.customer_name}`, 20, 60);
    doc.text(`Account Number: ${accountData.account_number}`, 20, 68);
    doc.text(`Total Transactions: ${accountData.total_transactions}`, 20, 76);
    doc.text(`Total Balance: ₹${accountData.total_balance?.toLocaleString()}`, 20, 84);
    
    // Prepare transaction data for table with better formatting
    const tableData = accountData.transactions.map((txn, index) => [
      index + 1,
      new Date(txn.timestamp).toLocaleDateString('en-IN'),
      txn.merchant.length > 20 ? txn.merchant.substring(0, 20) + '...' : txn.merchant,
      txn.merchant_category,
      txn.transaction_type,
      `₹${txn.amount.toLocaleString('en-IN')}`,
      txn.payment_method,
      txn.status,
      `₹${txn.balance_after_transaction.toLocaleString('en-IN')}`
    ]);
    
    // Add transaction table with better configuration
    doc.autoTable({
      startY: 95,
      head: [['#', 'Date', 'Merchant', 'Category', 'Type', 'Amount', 'Method', 'Status', 'Balance']],
      body: tableData,
      theme: 'striped',
      styles: {
        fontSize: 8,
        cellPadding: 2,
        overflow: 'linebreak',
        tableWidth: 'auto'
      },
      headStyles: {
        fillColor: [66, 139, 202],
        textColor: 255,
        fontSize: 9,
        fontStyle: 'bold',
        halign: 'center'
      },
      bodyStyles: {
        fontSize: 8,
        textColor: 50
      },
      alternateRowStyles: {
        fillColor: [245, 245, 245]
      },
      columnStyles: {
        0: { halign: 'center', cellWidth: 10 }, // #
        1: { cellWidth: 20 }, // Date
        2: { cellWidth: 25 }, // Merchant
        3: { cellWidth: 20 }, // Category
        4: { halign: 'center', cellWidth: 15 }, // Type
        5: { halign: 'right', cellWidth: 20 }, // Amount
        6: { cellWidth: 15 }, // Method
        7: { halign: 'center', cellWidth: 15 }, // Status
        8: { halign: 'right', cellWidth: 20 } // Balance
      },
      margin: { left: 10, right: 10 },
      pageBreak: 'auto',
      showHead: 'everyPage',
      tableLineColor: [200, 200, 200],
      tableLineWidth: 0.1,
    });
    
    // Add fraud detection summary on new page if needed
    const fraudulentTransactions = accountData.transactions.filter(txn => 
      txn.amount > 50000 || (txn.transaction_type === 'Debit' && txn.amount > 25000)
    );
    
    let finalY = doc.lastAutoTable.finalY + 15;
    
    // Check if we need a new page for fraud summary
    if (finalY > doc.internal.pageSize.height - 60) {
      doc.addPage();
      finalY = 20;
    }
    
    doc.setFontSize(14);
    doc.setTextColor(40, 40, 40);
    doc.text('Fraud Detection Summary', 20, finalY);
    
    doc.setFontSize(10);
    if (fraudulentTransactions.length > 0) {
      doc.setTextColor(220, 53, 69);
      doc.text(`⚠️ ${fraudulentTransactions.length} potentially fraudulent transaction(s) detected`, 20, finalY + 10);
      
      fraudulentTransactions.forEach((txn, index) => {
        const yPos = finalY + 20 + (index * 8);
        if (yPos < doc.internal.pageSize.height - 30) {
          doc.text(`   ${index + 1}. ₹${txn.amount.toLocaleString('en-IN')} at ${txn.merchant} on ${new Date(txn.timestamp).toLocaleDateString('en-IN')}`, 25, yPos);
        }
      });
    } else {
      doc.setTextColor(40, 167, 69);
      doc.text('✓ No fraudulent activity detected', 20, finalY + 10);
    }
    
    // Add footer to all pages
    const pageCount = doc.internal.getNumberOfPages();
    for (let i = 1; i <= pageCount; i++) {
      doc.setPage(i);
      const pageHeight = doc.internal.pageSize.height;
      doc.setFontSize(8);
      doc.setTextColor(100, 100, 100);
      doc.text('Generated by Bank Fraud Detection System', 20, pageHeight - 15);
      doc.text(`Page ${i} of ${pageCount}`, doc.internal.pageSize.width - 40, pageHeight - 15);
    }
    
    // Save the PDF
    const fileName = `transaction_report_${accountData.account_number}_${new Date().toISOString().split('T')[0]}.pdf`;
    doc.save(fileName);
    
    return { success: true, fileName };
  } catch (error) {
    console.error('PDF Generation Error:', error);
    return { success: false, error: error.message };
  }
};